cmake_minimum_required(VERSION 2.8)

project(grokitgames)

# options
option(USE_OPENGL "Build the OpenGL renderer" ON)
find_path(DEPENDENCY_PATH "")
set (CMAKE_CXX_STANDARD 11)
set (CMAKE_MACOSX_RPATH 1)

# general setup
find_library(LIBRARY_CLANG clang "${DEPENDENCY_PATH}/clang/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_GLFW glfw3 PATHS "${DEPENDENCY_PATH}/glfw/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_BASE v8_base "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_SNAPSHOT v8_external_snapshot "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_ICUI8N icui18n "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_ICUUC icuuc "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_LIBBASE v8_libbase "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_LIBPLATFORM v8_libplatform "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_LIBSAMPLER v8_libsampler "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_EXTSNAPSHOT v8_external_snapshot "${DEPENDENCY_PATH}/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_SOIL soil "${DEPENDENCY_PATH}/soil/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_BULLET_COLLISION BulletCollision "${DEPENDENCY_PATH}/bullet/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_BULLET_DYNAMICS BulletDynamics "${DEPENDENCY_PATH}/bullet/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_BULLET_LINEARMATH LinearMath "${DEPENDENCY_PATH}/bullet/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_LIBCURL curl "${DEPENDENCY_PATH}/libcurl/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_SSL ssl "${DEPENDENCY_PATH}/openssl/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_CRYPTO crypto "${DEPENDENCY_PATH}/openssl/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_ZLIB zlib "${DEPENDENCY_PATH}/openssl/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_ASSIMP assimp "${DEPENDENCY_PATH}/assimp/lib" NO_DEFAULT_PATH)

# set the output directory without the /Debug/ and /Release/ equivalents
foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR} )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR} )
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR} )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

# create metacode output directory
file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/Source/Autogenerated")

# create stub file
file(WRITE "${CMAKE_SOURCE_DIR}/Source/Autogenerated/Metadata.cpp" "// Autogenerated stub file")

# main eternity library
set (ENGINE_SOURCE_FILES "")

macro (list_source_files dir)
	file (GLOB CPP_FILES "${dir}/*.cpp")
	file (GLOB H_FILES "${dir}/*.h")
	
	list (APPEND ENGINE_SOURCE_FILES ${CPP_FILES})
	list (APPEND ENGINE_SOURCE_FILES ${H_FILES})
endmacro()

macro (clear_source_files)
	set (ENGINE_SOURCE_FILES "")
endmacro()

macro (group_source_files folder dir)
	file (GLOB CPP_FILES "${dir}/*.cpp")
	file (GLOB H_FILES "${dir}/*.h")
	
	source_group("${folder}" FILES ${CPP_FILES} ${H_FILES})
endmacro()

set (ENGINE_INCLUDE_DIRS "")
list (APPEND ENGINE_INCLUDE_DIRS "Source/Engine")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/v8/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/glfw/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/glm/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/glew/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/soil/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/bullet/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/sqlite/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/libcurl/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/assimp/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/openssl/include")
list (APPEND ENGINE_INCLUDE_DIRS "${DEPENDENCY_PATH}/rapidjson/include")

set (ENGINE_LIBS "")

list (APPEND ENGINE_LIBS ${LIBRARY_GLFW})
list (APPEND ENGINE_LIBS ${LIBRARY_V8_ICUI8N})
list (APPEND ENGINE_LIBS ${LIBRARY_V8_ICUUC})
list (APPEND ENGINE_LIBS ${LIBRARY_V8_BASE})
list (APPEND ENGINE_LIBS ${LIBRARY_V8_LIBBASE})
list (APPEND ENGINE_LIBS ${LIBRARY_V8_LIBPLATFORM})
list (APPEND ENGINE_LIBS ${LIBRARY_V8_LIBSAMPLER})
list (APPEND ENGINE_LIBS ${LIBRARY_V8_EXTSNAPSHOT})
list (APPEND ENGINE_LIBS ${LIBRARY_SOIL})
list (APPEND ENGINE_LIBS ${LIBRARY_BULLET_COLLISION})
list (APPEND ENGINE_LIBS ${LIBRARY_BULLET_DYNAMICS})
list (APPEND ENGINE_LIBS ${LIBRARY_BULLET_LINEARMATH})
list (APPEND ENGINE_LIBS ${LIBRARY_LIBCURL})
list (APPEND ENGINE_LIBS ${LIBRARY_SSL})
list (APPEND ENGINE_LIBS ${LIBRARY_CRYPTO})
list (APPEND ENGINE_LIBS ${LIBRARY_ASSIMP})

IF(WIN32)
	list (APPEND ENGINE_LIBS "legacy_stdio_definitions.lib")
	list (APPEND ENGINE_LIBS "OpenGL32.lib")
	list (APPEND ENGINE_LIBS "WS2_32.lib")
	list (APPEND ENGINE_LIBS "WinMM.Lib")
	list (APPEND ENGINE_LIBS "AdvAPI32.Lib")
	list (APPEND ENGINE_LIBS "Crypt32.Lib")
	list (APPEND ENGINE_LIBS "Dbghelp.lib")
	list (APPEND ENGINE_LIBS "ShLwApi.Lib")
	list (APPEND ENGINE_LIBS "Wldap32.Lib")
ENDIF()

IF(APPLE)
	list (APPEND ENGINE_LIBS "-framework IOKit")
	list (APPEND ENGINE_LIBS "-framework Cocoa")
	list (APPEND ENGINE_LIBS "-framework CoreVideo")
	list (APPEND ENGINE_LIBS "-framework CoreAudio")
	list (APPEND ENGINE_LIBS "-framework OpenGL")
	list (APPEND ENGINE_LIBS "-framework Security")
	list (APPEND ENGINE_LIBS "z")
ENDIF()

##
## engine core
##

list_source_files("Source/Engine/Core")
group_source_files("Source" "Source/Engine/Core")
add_library(core SHARED ${ENGINE_SOURCE_FILES})
target_include_directories(core PRIVATE ${ENGINE_INCLUDE_DIRS})
set_property(TARGET core APPEND PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")
set_property(TARGET core APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
target_include_directories(core PRIVATE "Source/Engine")

clear_source_files()

##
## engine network
##

list_source_files("Source/Engine/Network")
group_source_files("Source" "Source/Engine/Network")
add_library(networking SHARED ${ENGINE_SOURCE_FILES})
target_include_directories(networking PRIVATE ${ENGINE_INCLUDE_DIRS})
set_property(TARGET networking APPEND PROPERTY COMPILE_DEFINITIONS "CURL_STATICLIB")
set_property(TARGET networking APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
target_link_libraries(networking "core")

clear_source_files()

##
## engine IO
##

list_source_files("Source/Engine/IO")
group_source_files("Source" "Source/Engine/IO")
add_library(io SHARED ${ENGINE_SOURCE_FILES}  "${DEPENDENCY_PATH}/sqlite/src/sqlite3.c" "${DEPENDENCY_PATH}/glew/src/glew.c")
target_include_directories(io PRIVATE ${ENGINE_INCLUDE_DIRS})
set_property(TARGET io APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
set_property(TARGET io APPEND PROPERTY COMPILE_DEFINITIONS "GLEW_STATIC")
target_link_libraries(io "core" ${ENGINE_LIBS})

clear_source_files()

##
## engine render
##

list_source_files("Source/Engine/Render")
list_source_files("Source/Engine/Render/OpenGL")
list_source_files("Source/Engine/Render/Pipelines")
list_source_files("Source/Engine/Render/Pipelines/Deferred")
group_source_files("Source" "Source/Engine/Render")
group_source_files("Source\\\\OpenGL" "Source/Engine/Render/OpenGL")
group_source_files("Source\\\\Pipelines" "Source/Engine/Render/Pipelines")
group_source_files("Source\\\\Pipelines\\\\Deferred" "Source/Engine/Render/Pipelines/Deferred")
add_library(render SHARED ${ENGINE_SOURCE_FILES} "${DEPENDENCY_PATH}/glew/src/glew.c")
set_property(TARGET render APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
target_include_directories(render PRIVATE ${ENGINE_INCLUDE_DIRS})
target_link_libraries(render "core" "io" ${ENGINE_LIBS})

clear_source_files()

##
## engine audio
##

list_source_files("Source/Engine/Audio")
group_source_files("Source" "Source/Engine/Audio")
add_library(audio SHARED ${ENGINE_SOURCE_FILES})
set_property(TARGET audio APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
target_include_directories(audio PRIVATE ${ENGINE_INCLUDE_DIRS})
target_link_libraries(audio "core" "io")

clear_source_files()

#
## engine scripting
##

list_source_files("Source/Engine/Scripting")
group_source_files("Source" "Source/Engine/Scripting")
add_library(scripting SHARED ${ENGINE_SOURCE_FILES})
set_property(TARGET scripting APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
target_include_directories(scripting PRIVATE ${ENGINE_INCLUDE_DIRS})
target_link_libraries(scripting "core" "io")

#
## engine physics
##

list_source_files("Source/Engine/Physics")
group_source_files("Source" "Source/Engine/Physics")
add_library(physics SHARED ${ENGINE_SOURCE_FILES})
set_property(TARGET physics APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
target_include_directories(physics PRIVATE ${ENGINE_INCLUDE_DIRS})
target_link_libraries(physics "core")

clear_source_files()

#
## engine asset pipeline
##

list_source_files("Source/Engine/Assets")
group_source_files("Source" "Source/Engine/Assets")
add_library(assets SHARED ${ENGINE_SOURCE_FILES})
target_include_directories(assets PRIVATE ${ENGINE_INCLUDE_DIRS})
set_property(TARGET assets APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_EXPORTS")
target_link_libraries(assets "core" "io" "render" ${LIBRARY_ASSIMP})

clear_source_files()

##
## metacode generator 
##

set (GENERATOR_INCLUDE_DIRS "")
list (APPEND GENERATOR_INCLUDE_DIRS "Source/Generator")
list (APPEND GENERATOR_INCLUDE_DIRS "Source/Engine")
list (APPEND GENERATOR_INCLUDE_DIRS "${DEPENDENCY_PATH}/clang/include")
list (APPEND GENERATOR_INCLUDE_DIRS "${DEPENDENCY_PATH}/glm/include")
list (APPEND GENERATOR_INCLUDE_DIRS "${DEPENDENCY_PATH}/openssl/include")
list (APPEND GENERATOR_INCLUDE_DIRS "${DEPENDENCY_PATH}/sqlite/include")

add_executable(generator Source/Generator/main.cpp Source/Engine/Core/Directory.cpp Source/Generator/MetaClass.cpp Source/Engine/Core/Variant.cpp Source/Engine/IO/Resource.cpp)

target_include_directories(generator PRIVATE ${GENERATOR_INCLUDE_DIRS})
target_link_libraries(generator ${LIBRARY_CLANG} ${LIBRARY_CRYPTO} "io" "core")

# create the execution as a custom target
add_custom_target(
	generator-prebuild
	COMMAND $<TARGET_FILE:generator> "${CMAKE_SOURCE_DIR}/Source/Engine"
)

##
## engine metadata
##

add_library(meta SHARED "Source/Autogenerated/Metadata.cpp")
group_source_files("Source" "Source/Autogenerated")
target_include_directories(meta PRIVATE ${ENGINE_INCLUDE_DIRS})
target_link_libraries(meta "core" "networking" "render" "audio" "physics" "io" "scripting")

add_dependencies(meta generator-prebuild)

##
## game client
##

add_executable(game Source/Game/main.cpp)

set_property(TARGET game APPEND PROPERTY COMPILE_DEFINITIONS "GLEW_STATIC")
set_property(TARGET game APPEND PROPERTY COMPILE_DEFINITIONS "CURL_STATICLIB")
set_property(TARGET game APPEND PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")

target_link_libraries(game ${ETERNITY_LIBS} "core" "networking" "meta" "render" "audio" "physics" "io" "assets" "scripting")
target_include_directories(game PRIVATE ${ENGINE_INCLUDE_DIRS})
add_dependencies(game core networking)

##
## terrain generator
##

add_executable(terraingen Source/TerrainGen/main.cpp)

set_property(TARGET terraingen APPEND PROPERTY COMPILE_DEFINITIONS "GLEW_STATIC")
set_property(TARGET terraingen APPEND PROPERTY COMPILE_DEFINITIONS "CURL_STATICLIB")
set_property(TARGET terraingen APPEND PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")

target_link_libraries(terraingen ${LIBRARY_SOIL})
target_include_directories(terraingen PRIVATE ${ENGINE_INCLUDE_DIRS} "Source/TerrainGen")

# game server

# set (ETERNITY_SOURCE_FILES "")

# list_source_files("Source/Engine/Core")
# list_source_files("Source/Engine/IO")
# list_source_files("Source/Engine/Network")
# list_source_files("Source/Engine/Render")
# list_source_files("Source/Engine/Scripting")
# list_source_files("Source/Engine/Physics")

# add_executable(server Source/Server/main.cpp ${ETERNITY_SOURCE_FILES} Source/Autogenerated/Metadata.cpp Source/ThirdParty/sqlite/src/sqlite3.c)

# set_property(TARGET server APPEND PROPERTY COMPILE_DEFINITIONS "GLEW_STATIC")
# set_property(TARGET server APPEND PROPERTY COMPILE_DEFINITIONS "CURL_STATICLIB")
# set_property(TARGET server APPEND PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")

# target_link_libraries(server "eternity" ${ETERNITY_LIBS})
# target_include_directories(server PRIVATE ${ETERNITY_INCLUDE_DIRS})
# add_dependencies(server generator-prebuild)
